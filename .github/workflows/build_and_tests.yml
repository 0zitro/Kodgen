name: Tests

on:
  push:
    branches:
      - master
      - dev
  workflow_dispatch:

jobs:
  windows_msvc:
    name: Windows | MSVC
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        build_config: [Release, Debug]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Generate Project
        run: cmake -B Build/${{ matrix.build_config }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -DKODGEN_DEV=1 -G "Visual Studio 16 2019" -A x64

      - name: Build Kodgen
        run: cmake --build Build/${{ matrix.build_config }} --config ${{ matrix.build_config }} --verbose

      - name: Run Tests
        run: cd Build/${{ matrix.build_config }} && ctest -C ${{ matrix.build_config }} -V

      - name: Setup Binaries Artifact
        if: matrix.build_config == 'Release' && (startsWith(github.event.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
        run: |
          mkdir KodgenBinaries
          mkdir KodgenBinaries/Windows/
          mkdir KodgenBinaries/Windows/Bin
          mkdir KodgenBinaries/Windows/Lib

          mv Build/Release/Lib/Release/Kodgen.lib KodgenBinaries/Windows/Lib/
          mv Kodgen/ThirdParty/x64/Shared/libclang.dll KodgenBinaries/Windows/Bin/
          mv Kodgen/ThirdParty/x64/Bin/vswhere.exe KodgenBinaries/Windows/Bin/

      - name: Upload Binaries Artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: KodgenBinaries
          path: ./KodgenBinaries
          retention-days: 7

  linux_gcc_clang:
    name: Linux | Clang/GCC
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build_config: [Release, Debug]
        compiler: [clang++-7, clang++-8, clang++-9, clang++-10, clang++-11, g++-8, g++-9, g++-10, g++-11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install suitable compiler
        run: sudo apt-get install ${{ matrix.compiler }}

      - name: Install ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.15.0'

      - name: Install Valgrind
        run: sudo apt-get install valgrind

      - name: Substitute Compiler Name
        uses: bluwy/substitute-string-action@v1
        id: replace_compiler
        with:
          _input-text: ${{ matrix.compiler }}
          clang++: 'clang'
          g++: 'gcc'

      - name: Setup Compiler
        run: |
          echo "CC=${{ steps.replace_compiler.outputs.result }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Generate Project
        run: cmake -B Build/${{ matrix.build_config }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -DKODGEN_DEV=1 -G "Ninja"

      - name: Build Kodgen
        run: cmake --build Build/${{ matrix.build_config }} --config ${{ matrix.build_config }} --verbose

      - name: Run Tests
        run: |
          cd Build/${{ matrix.build_config }} && ctest -C ${{ matrix.build_config }} -T memcheck -V
          cat ./Testing/Temporary/MemoryChecker.*.log
  
      - name: Setup Binaries Artifact
        if: matrix.compiler == 'clang++-11' && matrix.build_config == 'Release' && (startsWith(github.event.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
        run: |
          mkdir KodgenBinaries
          mkdir KodgenBinaries/Linux/
          mkdir KodgenBinaries/Linux/Bin
          mkdir KodgenBinaries/Linux/Lib
          mv Kodgen/ThirdParty/x64/Shared/libclang.so KodgenBinaries/Linux/Bin/libclang.so
          mv Kodgen/ThirdParty/x64/Shared/libclang.so.12 KodgenBinaries/Linux/Bin/libclang.so.12
          mv Build/Release/Lib/libKodgen.a KodgenBinaries/Linux/Lib/

          mv Kodgen/Include KodgenBinaries/Include
          mv Build/Release/Bin/KodgenSettings.toml KodgenBinaries/
         
          mv README.md KodgenBinaries/ 
          mv LICENSE.md KodgenBinaries/
          mv Kodgen/ThirdParty/Licenses KodgenBinaries/

      - name: Upload Binaries Artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: KodgenBinaries
          path: ./KodgenBinaries
          retention-days: 7

  macos:
    name: MacOS | Clang
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        build_config: [Release, Debug]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.15.0'

      - name: Generate Project
        run: cmake -B Build/${{ matrix.build_config }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -DKODGEN_DEV=1 -G "Ninja"

      - name: Build Kodgen
        run: cmake --build Build/${{ matrix.build_config }} --config ${{ matrix.build_config }} --verbose

      - name: Run Tests
        run: cd Build/${{ matrix.build_config }} && ctest -C ${{ matrix.build_config }} -V

      - name: Setup Binaries Artifact
        if: matrix.build_config == 'Release' && (startsWith(github.event.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
        run: |
          mkdir KodgenBinaries
          mkdir KodgenBinaries/Mac/
          mkdir KodgenBinaries/Mac/Bin
          mkdir KodgenBinaries/Mac/Lib
          mv Build/Release/Lib/libRefureku.a KodgenBinaries/Mac/Lib/
          mv Kodgen/ThirdParty/x64/Shared/libclang.dylib KodgenBinaries/Mac/Bin/

      - name: Upload Binaries Artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: KodgenBinaries
          path: ./KodgenBinaries
          retention-days: 7


  deploy_release_binaries:
    name: Deploy Binaries
    runs-on: ubuntu-latest
    needs: [windows_msvc, linux_gcc_clang, macos]
    if: startsWith(github.event.ref, 'refs/tags/v')

    steps:
      - name: Install zip
        run: sudo apt-get install zip

      - name: Compute version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        
      - name: Setup Env
        id: env_vars
        run: |
          echo ::set-output name=LINUX_ARCHIVE_PATH::kodgen_${{steps.version.outputs.VERSION}}_linux.tar.gz
          echo ::set-output name=WIN_ARCHIVE_PATH::kodgen_${{steps.version.outputs.VERSION}}_windows.zip
          echo ::set-output name=MAC_ARCHIVE_PATH::kodgen_${{steps.version.outputs.VERSION}}_macos.tar.gz

      - name: Fetch Binaries Artifacts
        uses: actions/download-artifact@v2
        with:
          name: KodgenBinaries
          path: ./KodgenBinaries

      - name: Build Linux Binaries Archive
        run: |
          cp -R KodgenBinaries/Include KodgenBinaries/Licenses KodgenBinaries/Linux
          cp KodgenBinaries/* KodgenBinaries/Linux 2>/dev/null || :
          tar -czvf ${{steps.env_vars.outputs.LINUX_ARCHIVE_PATH}} --directory KodgenBinaries/Linux .

      - name: Build Windows Binaries Archive
        run: |
          cp -R KodgenBinaries/Include KodgenBinaries/Licenses KodgenBinaries/Windows
          cp KodgenBinaries/* KodgenBinaries/Windows 2>/dev/null || :
          (cd KodgenBinaries/Windows && zip -r - .) > ${{steps.env_vars.outputs.WIN_ARCHIVE_PATH}}

      - name: Build MacOS Binaries Archive
        run: |
          cp -R KodgenBinaries/Include KodgenBinaries/Licenses KodgenBinaries/Mac
          cp KodgenBinaries/* KodgenBinaries/Mac 2>/dev/null || :
          tar -czvf ${{steps.env_vars.outputs.MAC_ARCHIVE_PATH}} --directory KodgenBinaries/Mac .

      - name: Publish Release Draft
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            ${{steps.env_vars.outputs.LINUX_ARCHIVE_PATH}}
            ${{steps.env_vars.outputs.WIN_ARCHIVE_PATH}}
            ${{steps.env_vars.outputs.MAC_ARCHIVE_PATH}}